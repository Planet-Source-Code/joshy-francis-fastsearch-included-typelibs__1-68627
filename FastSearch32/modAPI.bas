Attribute VB_Name = "modAPI"
Option Explicit
Public Declare Function GetLogicalDriveStrings Lib "kernel32" Alias "GetLogicalDriveStringsA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
Public Declare Function GetDriveType Lib "kernel32" Alias "GetDriveTypeA" (ByVal nDrive As String) As Long
Public Declare Function GetVolumeInformation Lib "kernel32" Alias "GetVolumeInformationA" (ByVal lpRootPathName As String, ByVal lpVolumeNameBuffer As String, ByVal nVolumeNameSize As Long, lpVolumeSerialNumber As Long, lpMaximumComponentLength As Long, lpFileSystemFlags As Long, ByVal lpFileSystemNameBuffer As String, ByVal nFileSystemNameSize As Long) As Long

Private Declare Function InitCommonControlsEx Lib "comctl32.dll" (init As InitCommonControlsExType) As Boolean

Private Type InitCommonControlsExType
    dwSize                          As Long     'size of this structure
    dwICC                           As Long     'flags indicating which classes to be initialized
End Type
Private Const ICC_USEREX_CLASSES    As Long = &H200
Public Declare Sub SHChangeNotify Lib "Shell32" (ByVal wEventId As Long, ByVal uFlags As Long, ByVal dwItem1 As Long, ByVal dwItem2 As Long)
Public Const SHCNE_ASSOCCHANGED = &H8000000

Public Const SHCNE_DISKEVENTS = &H2381F
Public Const SHCNE_GLOBALEVENTS = &HC0581E0         ' Events that dont match pidls first
Public Const SHCNE_ALLEVENTS = &H7FFFFFFF
Public Const SHCNE_INTERRUPT = &H80000000           ' The presence of this flag indicates
                                            ' that the event was generated by an
                                            ' interrupt.  It is stripped out before
                                            ' the clients of SHCNNotify_ see it.
#If WIN32_IE >= &H400 Then
    Public Const SHCNEE_ORDERCHANGED = &H2               ' dwItem2 is the pidl of the changed folder
#End If

' Flags
' uFlags & SHCNF_TYPE is an ID which indicates what dwItem1 and dwItem2 mean
Public Const SHCNF_IDLIST = &H0                ' LPITEMIDLIST
Public Const SHCNF_PATHA = &H1                 ' path name
Public Const SHCNF_PRINTERA = &H2              ' printer friendly name
Public Const SHCNF_DWORD = &H3                 ' DWORD
Public Const SHCNF_PATHW = &H5                 ' path name
Public Const SHCNF_PRINTERW = &H6              ' printer friendly name
Public Const SHCNF_TYPE = &HFF
Public Const SHCNF_FLUSH = &H1000
Public Const SHCNF_FLUSHNOWAIT = &H2000

Function InitCommonControls() As Boolean
    Dim InitCC As InitCommonControlsExType
    With InitCC
        .dwSize = Len(InitCC)
        .dwICC = ICC_USEREX_CLASSES
    End With
    
    InitCommonControls = InitCommonControlsEx(InitCC)         'initialize the common controls
End Function

Function FillDrives(cbo As Object, Optional ByVal ClearList As Boolean = True, _
    Optional ByVal IncludeFLoppyDrives As Boolean = False, _
    Optional ByVal FullName As Boolean = True) As Boolean
Dim str As String, C As Integer, Ret As Long, st As String
    If ClearList = True Then cbo.Clear
str = Space$(255)
    Ret = GetLogicalDriveStrings(255, str)
If Ret Then
        str = Mid(str, 1, Ret)
            C = 1
    Do Until C = 0
        C = InStr(str, Chr(0))
        If C Then
                st = Mid(str, 1, C - 1)
            str = Mid(str, C + 1)
                If IncludeFLoppyDrives = True Then
                    Ret = GetDriveType(st)
                Else
                    If InStr(LCase(st), "a") = 0 And InStr(LCase(st), "b") = 0 Then
                        Ret = GetDriveType(st)
                    Else
                        Ret = 0
                    End If
                End If
'            If Ret >= 2 And Ret < 5 Then'For Removable Drives
            If Ret Then
                Dim sFs As String, VolName As String
                Dim MaxCompL As Long, FSFl As Long
                Dim VolSerial As Long, x As Long
                        sFs = Space$(255)
                        VolName = Space$(255)
                    x = GetVolumeInformation(st, VolName, 255, VolSerial, _
                        MaxCompL, FSFl, sFs, 255)
                    If x Then
                        VolName = Left(VolName, InStr(VolName, Chr(0)) - 1)
                        If Trim(VolName) = "" Then
                            If Ret = 3 Then
                                VolName = "Local Disk"
                            ElseIf Ret = 2 Then
                                VolName = "Removable Disk"
                            Else
                                VolName = "Unknown Disk"
                            End If
                        End If
                            sFs = Left(sFs, InStr(sFs, Chr(0)) - 1)
                        cbo.AddItem st & IIf(FullName = True, " " & VolName & " " & sFs & " " & VolSerial, "")
                    End If
'                cbo.AddItem st
            End If
        End If
    Loop
End If
If cbo.ListCount Then cbo.ListIndex = 0
End Function
Sub AddReg(ByVal Sec As String, ByVal sKey As String, ByVal sVal As String)
On Error Resume Next
Dim MS As Variant, I As Long, Found As Boolean
    Found = False
MS = GetAllSettings(App.Title, Sec)
   For I = LBound(MS, 1) To UBound(MS, 1)
'      Debug.Print MS(i, 0), MS(i, 1)
      If LCase(MS(I, 1)) = LCase(sVal) Then
            Found = True
            Exit For
        End If
'        Obj.AddItem MS(i, 1)
   Next I
If Found = False Or Err Then
    SaveSetting App.Title, Sec, sKey, sVal
End If
End Sub
Sub FillReg(ByVal Sec As String, Obj As Object, Optional ByVal mClear As Boolean = True, _
    Optional ByVal RemDup As Boolean)
On Error Resume Next
Dim MS As Variant, I As Long
MS = GetAllSettings(App.Title, Sec)
    If mClear = True Then Obj.Clear
If RemDup = False Then
           For I = LBound(MS, 1) To UBound(MS, 1)
        '      Debug.Print MS(i, 0), MS(i, 1)
                Obj.AddItem MS(I, 1)
           Next I
Else
    Dim x As Integer, Found As Boolean
       For I = LBound(MS, 1) To UBound(MS, 1)
    '      Debug.Print MS(i, 0), MS(i, 1)
            For x = 0 To Obj.ListCount - 1
                If InStr(LCase(Obj.List(x)), LCase(MS(I, 1))) Then
                    Found = True
                    Exit For
                End If
            Next
            If Found = True Then
                Exit Sub
            Else
                Obj.AddItem MS(I, 1)
            End If
       Next I
End If
End Sub
Sub DelReg(ByVal Sec As String, Optional ByVal sVal As String = "")
If sVal = "" Then
    DeleteSetting App.Title, Sec
Else
    On Error Resume Next
    Dim MS As Variant, I As Long, Found As Boolean
        Found = False
    MS = GetAllSettings(App.Title, Sec)
       For I = LBound(MS, 1) To UBound(MS, 1)
    '      Debug.Print MS(i, 0), MS(i, 1)
          If LCase(MS(I, 1)) = LCase(sVal) Then
'          If LCase(MS(i, 0)) = LCase(sKey) Then
                Found = True
                    DeleteSetting App.Title, Sec, MS(I, 0)
                Exit For
            End If
       Next I
'    If Found = False Or Err Then
'        SaveSetting App.Title, Sec, sKey, sVal
'    End If
End If
End Sub

Function FileCopyFast(Src As String, Dest As String) As Boolean
    Const ChunkSize As Long = 1024 ^ 2
    
    Dim FileNumDest As Integer, FileNumSrc As Integer
    Dim SrcSize As Long, SrcPos As Long
    Dim Data(ChunkSize) As Byte
    FileNumDest = OpenBinaryFile(Dest, True)
    FileNumSrc = OpenBinaryFile(Src, False)
    SrcSize = LOF(FileNumSrc)
    While SrcPos + ChunkSize < SrcSize
        Get FileNumSrc, , Data
        Put FileNumDest, , Data
        SrcPos = SrcPos + ChunkSize
    Wend
    Close FileNumSrc
    Close FileNumDest
End Function

Function OpenBinaryFile(FilePath As String, Optional bWrite As Boolean) As Integer
    OpenBinaryFile = FreeFile
    
    If bWrite Then
        Open FilePath For Binary Access Write As OpenBinaryFile
    Else
        Open FilePath For Binary Access Read As OpenBinaryFile
    End If
End Function

Sub FindinWindow(ByVal sFile As String, ByVal sFind As String, Optional ByVal UseAlt As Boolean)
On Error GoTo E
Dim wnd As Long, str As String, Ret As Long
'    Shell "notepad " & sFile, vbNormalFocus
'    SleepEx 1000, 1
'    Sleep 1000
wnd = GetForegroundWindow 'FindWindow("Notepad", vbNullString)
If wnd = 0 Then Exit Sub
        str = Space$(255)
    Ret = GetWindowText(wnd, str, 255)
        str = Left$(str, InStr(str, Chr(0)) - 1)
            If str = frmFastSearch.Caption Then
                MsgBox "Can't find", vbInformation
                Exit Sub
            End If
            If str = "" Then
                MsgBox "Can't find", vbInformation
                Exit Sub
            End If
    AppActivate str
            If UseAlt = True Then
                SendKeys "%"
                SendKeys "{E}"
                SendKeys "{F}"
                SendKeys sFind
                SendKeys "~"
            Else
'                    Sleep 1000
                SendKeys "^f"
                SendKeys sFind
                SendKeys "~"
            End If
Exit Sub
E:
    MsgBox "Can't find", vbInformation
End Sub
Sub Winlogon(Optional ByVal RunExplorer As Boolean = False, Optional ByVal FixShell As Boolean = True)
Dim Val As String, sExe As String, sCmd As String
'********** Creating Backup of Shell
        Val = GetStringValue("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", "Shell_Orig")
    If Val = "" Or Val = "Error" Then
            Val = GetStringValue("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", "Shell")
        SetStringValue "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", "Shell_Orig", Val
            Val = GetStringValue("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", "Shell_Orig")
        If Val = "" Or Val = "Error" Then
            MsgBox "Error in Backuping", vbCritical
            Exit Sub
        End If
'        Debug.Print Val
    End If
'*****************************************
    sExe = App.Path '& "\" & App.EXEName & ".exe"
        If Right$(sExe, 1) <> "\" Then sExe = sExe & "\"
    sExe = sExe & App.EXEName & ".exe"
        sCmd = sExe & " " & "@shell@"
SetStringValue "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", "Shell", sCmd
    If InStr(LCase$(Val), "explorer") Then
    Else
        Val = "Explorer.exe"
    End If
If RunExplorer = True Then
    SetStringValue "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", "Shell", Val
        Shell Val, vbNormalFocus
End If
If FixShell = True Then
    SetStringValue "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", "Shell", sCmd
Else
    SetStringValue "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", "Shell", Val
End If
End Sub
Function IsIamShell() As Boolean
Dim Val As String
        Val = GetStringValue("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon", "Shell")
    If Val = "Error" Then
        Val = ""
    End If
Val = LCase$(Val)
    If InStr(Val, LCase$(App.EXEName)) Then
        IsIamShell = True
    Else
        IsIamShell = False
    End If
End Function
Sub Main()
On Error Resume Next
        frmFastSearch.Show
    SetFindExtension
If App.StartMode = vbSModeAutomation Then
    Dim strExe As String
            strExe = App.Path
                If Right$(strExe, 1) <> "\" Then strExe = strExe & "\"
            strExe = strExe & App.EXEName & ".exe"
    Shell strExe, vbNormalFocus
End If
    SHChangeNotify SHCNE_ALLEVENTS, ByVal 0, ByVal 0, ByVal 0
    
End Sub
Sub SetFindExtension()
Dim clsid As String, strProj As String, strExe As String
    strProj = App.Title
        strExe = App.Path
            If Right$(strExe, 1) <> "\" Then strExe = strExe & "\"
    If App.StartMode = vbSModeStandalone Then
        strExe = strExe & App.EXEName & ".exe"
    Else
        strExe = strExe & App.EXEName & ".dll"
    End If
 clsid = GetStringValue("HKEY_CLASSES_ROOT\" & strProj & ".IFastSearch\Clsid", "")    'get the classID for .clsPropSheet

   '*********** FindExtensions ****************************************
                'Dynamic Find extensions
        '            HKEY_LOCAL_MACHINE
        '               Software
        '                  Microsoft
        '                     Windows
        '                        CurrentVersion
        '                           Explorer
        '                              FindExtensions
        '                                 MyFind (default value = "<clsid>")
'                CreateKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FindExtensions\" & strProj
'                SetStringValue "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FindExtensions\" & strProj, "", clsid
'    Static Find extensions
'                HKEY_LOCAL_MACHINE
'                   Software
'                      Microsoft
'                         Windows
'                            CurrentVersion
'                               Explorer
'                                  FindExtensions
'                                     Static
'                                        MyFind (default value = "<clsid>")
'                                           0 (default value = "&My Find Utility")
'                                              DefaultIcon (default value = "c:\MyFind.dll,0")

                CreateKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FindExtensions\Static\" & strProj
                SetStringValue "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FindExtensions\Static\" & strProj, "", clsid
                CreateKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FindExtensions\Static\" & strProj & "\0"
                SetStringValue "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FindExtensions\Static\" & strProj & "\0", "", strProj
               CreateKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FindExtensions\Static\" & strProj & "\0\DefaultIcon"
               SetStringValue "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FindExtensions\Static\" & strProj & "\0\DefaultIcon", "", strExe & ",0"
'                SetStringValue "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FindExtensions\Static\" & strProj & "\1", , "FastSearch"
'                SetStringValue "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FindExtensions\Static\" & strProj & "\1\DefaultIcon", , "%SystemRoot%\system32\SHELL32.dll,22"

   '*********** End FindExtensions ****************************************
End Sub

